name: CHAPPA-RUST CI

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main, develop]

env:
    # Standardize the environment variable for better caching
    CARGO_TERM_COLOR: always

jobs:
    # Formatting Check (Runs on a single OS as it's not platform-dependent)
    formatting:
        name: Check Formatting
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - name: Install Rust toolchain
              uses: dtolnay/rust-toolchain@stable
              with:
                  components: rustfmt # Only install rustfmt

            - name: Run cargo fmt --all -- --check
              run: cargo fmt --all -- --check

    # Linting & Testing (Runs across multiple OSes and configurations)
    test:
        name: ${{ matrix.os }} - Rust ${{ matrix.toolchain }}
        runs-on: ${{ matrix.os }}

        # Define a matrix to test against different OSes and Rust versions
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]
                toolchain: [stable, 1.70.0] # Test against current stable and a minimum supported version (1.70.0)

        steps:
            - uses: actions/checkout@v4

            - name: Install Rust toolchain
              uses: dtolnay/rust-toolchain@stable
              with:
                  toolchain: ${{ matrix.toolchain }}
                  components: clippy # Ensure clippy is installed for linting

            - name: Restore Cargo Cache
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/registry
                      ~/.cargo/git
                      target
                  key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
                  restore-keys: ${{ runner.os }}-cargo-

            - name: Build (Check only)
              # We use 'cargo check' as a quick smoke test before running full tests
              run: cargo check --all-targets --all-features

            - name: Run Tests
              # Run unit tests, integration tests, and doc tests (including the examples/ folder via doc-comment)
              run: cargo test --all-targets --all-features

            - name: Run Clippy Linter
              # This uses the 'lint' alias from .cargo/config.toml
              run: cargo clippy --all-targets --all-features -- -D warnings
